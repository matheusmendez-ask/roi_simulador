import os  # Import necess√°rio para acessar vari√°veis de ambiente
import io
import numpy as np
import matplotlib.pyplot as plt
import streamlit as st
from PIL import Image
import openai
from matplotlib.offsetbox import OffsetImage, AnnotationBbox

# Carregar a chave da API do OpenAI de uma vari√°vel de ambiente
openai.api_key = os.getenv("OPENAI_API_KEY")

logo_path = "logo_branco.png"

st.set_page_config(page_title='Simulador de ROI', page_icon='üí∞', layout='centered')

# CSS personalizado com imagem de fundo condicional
st.markdown(f"""
   <style>
        /* Inputs de texto com bordas arredondadas */
        .stTextInput>div>div>input {{
            border-radius: 20px;
        }}

        /* Bot√µes com estilo personalizado */
        .stButton>button {{
            border-radius: 20px;
            border: 1px solid #144383; /* Azul */
            color: white; /* Texto branco */
            background-color: #144383; /* Azul */
            padding: 10px 24px;
            cursor: pointer;
            font-size: 16px;
        }}

        /* Efeito ao passar o mouse sobre os bot√µes */
        .stButton>button:hover {{
            background-color: #D3D3D3; /* Cinza claro */
            color: #144383; /* Texto azul */
        }}

        /* Estilo para textos em markdown */
        .reportview-container .markdown-text-container {{
            font-family: monospace;
        }}

        /* Cor personalizada para markdown */
        .stMarkdown {{
            color: #FF4B4B; /* Vermelho */
        }}

        /* Feedback de sucesso com cor de fundo personalizada */
        .st-success {{
            background-color: #D4EDDA;
        }}

        /* Feedback de informa√ß√£o com cor de fundo personalizada */
        .st-info {{
            background-color: #D1ECF1;
        }}
    </style>
    """, unsafe_allow_html=True)

# Defini√ß√£o dos usu√°rios e senhas
usuarios = {
    'Matheus': 'senhaMatheus',
    'Augusto': '!7uP32lm',
    'Eduardo': ')rHaI024',
    'Ivonete': 'Ff014>1P',
    'Alvaro': '67{8Nk6l',
    'Dani': 'g16Bm!2o',
    'Cristiane': '2SP1l7C5',
    'Well': '6u6#1E}t',
    'Julio': 'xM75RF2p'
}

def verificar_login():
    usuario = st.sidebar.text_input('Usu√°rio', key='usuario_input')
    senha = st.sidebar.text_input('Senha', type='password', key='senha_input')
    if st.sidebar.button('Login'):
        if usuario in usuarios and usuarios[usuario] == senha:
            st.session_state['autenticado'] = True
            st.session_state['usuario_atual'] = usuario
            st.sidebar.success('Voc√™ est√° logado!')
            # Recarrega a p√°gina para aplicar o novo estilo de fundo
            st.experimental_rerun()  # Corre√ß√£o aqui
        else:
            st.session_state['autenticado'] = False
            st.sidebar.error('Usu√°rio ou senha inv√°lidos.')
            st.sidebar.warning('Por favor, realize o login para acessar a calculadora.')

# Fun√ß√£o de logout
def realizar_logout():
    if st.sidebar.button('Logout'):
        st.session_state['autenticado'] = False
        del st.session_state['usuario_atual']

# Inicializa√ß√£o do estado da sess√£o para autentica√ß√£o, se necess√°rio
if 'autenticado' not in st.session_state:
    st.session_state['autenticado'] = False

verificar_login()
realizar_logout()

# Carrega dados e mostra a calculadora se o usu√°rio estiver autenticado

if st.session_state.get('autenticado', False):
    # Fun√ß√£o para criar um gr√°fico de barras personalizado
    def criar_grafico(receita_mensal, investimento_mensal, logo_path=None):
        import io
        import numpy as np
        from matplotlib.offsetbox import OffsetImage, AnnotationBbox

        # Define o fundo do gr√°fico como transparente
        background_color = 'none'

        fig, ax = plt.subplots(figsize=(10, 6))

        # Ajusta a cor de fundo do gr√°fico e dos eixos para transparente
        fig.patch.set_facecolor(background_color)
        ax.set_facecolor(background_color)

        # Dados para o gr√°fico
        categorias = ['Receita Mensal', 'Investimento Mensal']
        valores = [receita_mensal, investimento_mensal]

        # Criando o gr√°fico de barras
        bars = ax.bar(categorias, valores, color=['#4CAF50', '#FF5733'])

        # Adicionando valores no topo das barras
        for bar in bars:
            height = bar.get_height()
            ax.annotate(f'R$ {height:,.2f}',
                        xy=(bar.get_x() + bar.get_width() / 2, height),
                        xytext=(0, 3),
                        textcoords="offset points",
                        ha='center', va='bottom', fontsize=12, color='white')

        # T√≠tulo e r√≥tulos
        ax.set_title('Comparativo de Receita e Investimento Mensal', fontsize=16, color='white')
        ax.set_ylabel('Valor (R$)', fontsize=14, color='white')
        ax.set_ylim(0, max(valores) * 1.2)

        # Ajustando a cor dos r√≥tulos dos eixos
        ax.tick_params(axis='x', colors='white')
        ax.tick_params(axis='y', colors='white')

        # Removendo borda do gr√°fico para um visual mais clean
        ax.spines['top'].set_visible(False)
        ax.spines['right'].set_visible(False)
        ax.spines['left'].set_color('black')
        ax.spines['bottom'].set_color('black')

        # Adicionando o logotipo da empresa com transpar√™ncia
        if logo_path:
            logo = Image.open(logo_path).convert("RGBA")  # Garante que a imagem est√° em RGBA
            logo_array = np.array(logo)

            # Cria o OffsetImage sem alterar o alfa
            imagebox = OffsetImage(logo_array, zoom=0.09)

            # Define a posi√ß√£o da imagem
            ab = AnnotationBbox(imagebox, (1, 1),
                                xycoords='axes fraction',
                                frameon=False,
                                box_alignment=(1, 1),
                                pad=0.1)

            ax.add_artist(ab)

        # Salvar o gr√°fico em um buffer com fundo transparente
        buf = io.BytesIO()
        plt.savefig(buf, format='png', transparent=True, bbox_inches='tight')
        buf.seek(0)

        # Exibir a imagem no Streamlit
        st.image(buf)

        # Fechar a figura para liberar mem√≥ria
        plt.close(fig)

    # Fun√ß√£o para gerar argumento
    def gerar_argumento(receita_mensal, investimento_mensal, roi):
        prompt = f"""
        O cliente est√° avaliando a compra de um equipamento para a sua cl√≠nica de est√©tica que custa R$ {investimento_mensal:,.2f} por m√™s. Ele est√° interessado em entender o retorno sobre esse investimento (ROI) e como isso pode impactar positivamente sua opera√ß√£o. Com base em um ROI de {roi:.2%} e nas receitas mensais esperadas de R$ {receita_mensal:,.2f}, forne√ßa argumentos claros e persuasivos que demonstrem os benef√≠cios financeiros, operacionais e estrat√©gicos deste investimento, e como ele ajudar√° o cliente a atingir seus principais objetivos. Adote um tom confiante e direto, focando em incentivar o cliente a perceber o valor do investimento e a tomar a decis√£o de compra.
        """
        response = openai.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                            {"role": "system", "content": "Voc√™ √© um assistente de vendas que ajuda a argumentar com clientes."},
                            {"role": "user", "content": prompt}
                        ]
                    )
        # Assumindo que 'response' √© o objeto retornado pela chamada √† API
        argumento = response.choices[0].message.content
        return argumento

    # T√≠tulo do aplicativo
    st.title('üí∞ Simulador de ROI')

    # Sidebar com o logotipo
    # st.sidebar.image(logo_path, use_column_width=True)

    # Inputs do usu√°rio com layout melhorado
    st.header('üìä Insira os dados para simula√ß√£o')
    with st.form(key='roi_form'):
        col1, col2 = st.columns(2)
        with col1:
            qtd_pessoas = st.number_input('Quantidade de pessoas atendidas por dia', min_value=1, value=10)
            preco_atendimento = st.number_input('Pre√ßo cobrado por atendimento (R$)', min_value=0.0, value=100.0, step=0.01)
        with col2:
            qtd_dias = st.number_input('Quantidade de dias trabalhados por m√™s', min_value=1, max_value=31, value=22)
            investimento_mensal = st.number_input('Investimento mensal (R$)', min_value=0.0, value=5000.0, step=0.01)
        submit_button = st.form_submit_button(label='Calcular')

    # Verifica se o bot√£o 'Calcular' foi clicado ou se os dados j√° est√£o armazenados
    if submit_button:
        # C√°lculos
        receita_mensal = qtd_pessoas * qtd_dias * preco_atendimento
        roi = (receita_mensal - investimento_mensal) / investimento_mensal

        # Armazenar os resultados no st.session_state
        st.session_state['receita_mensal'] = receita_mensal
        st.session_state['investimento_mensal'] = investimento_mensal
        st.session_state['roi'] = roi

    # Verifica se os valores est√£o dispon√≠veis no st.session_state
    if 'receita_mensal' in st.session_state and 'investimento_mensal' in st.session_state and 'roi' in st.session_state:
        receita_mensal = st.session_state['receita_mensal']
        investimento_mensal = st.session_state['investimento_mensal']
        roi = st.session_state['roi']

        # Resultados com m√©tricas estilizadas
        st.header('üìà Resultados')
        col1, col2 = st.columns(2)
        col1.metric('Receita Mensal', f'R$ {receita_mensal:,.2f}', delta=f'R$ {receita_mensal - investimento_mensal:,.2f}')
        col2.metric('ROI', f'{roi:.2%}', delta_color="inverse")

        # Gr√°fico de barras para visualiza√ß√£o
        st.header('üìä Visualiza√ß√£o do Retorno')
        criar_grafico(receita_mensal, investimento_mensal, logo_path)

        # Gerando argumentos com IA
        st.header('üìù Sugest√µes de Argumentos para Venda - IA')
        if st.button('Gerar Argumento'):
            # Fun√ß√£o para limpar o texto
            def limpar_texto(texto):
                # Remove quebras de linha e retornos de carro
                texto_limpo = texto.replace('\n', ' ').replace('\r', ' ')
                # Remove espa√ßos duplicados
                texto_limpo = ' '.join(texto_limpo.split())
                return texto_limpo

            # Fun√ß√£o para definir o estilo da fonte
            def set_font_style():
                st.markdown(
                    """
                    <style>
                    @import url('https://fonts.googleapis.com/css2?family=Roboto&display=swap');
                    html, body, [class*="css"]  {
                        font-family: 'Roboto', sans-serif;
                    }
                    </style>
                    """,
                    unsafe_allow_html=True
                )

            set_font_style()
            def gerar_argumento(receita_mensal, investimento_mensal, roi):
                prompt = f"""
                O cliente est√° avaliando a compra de um equipamento para a sua cl√≠nica de est√©tica que custa R$ {investimento_mensal:,.2f} por m√™s. Ele est√° interessado em entender o retorno sobre esse investimento (ROI) e como isso pode impactar positivamente sua opera√ß√£o. Com base em um ROI de {roi:.2%} e nas receitas mensais esperadas de R$ {receita_mensal:,.2f}, forne√ßa argumentos claros e persuasivos que demonstrem os benef√≠cios financeiros, operacionais e estrat√©gicos deste investimento, e como ele ajudar√° o cliente a atingir seus principais objetivos. Adote um tom confiante e direto, focando em incentivar o cliente a perceber o valor do investimento e a tomar a decis√£o de compra.
                """
                response = openai.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                            {"role": "system", "content": "Voc√™ √© um assistente de vendas que ajuda a argumentar com clientes."},
                            {"role": "user", "content": prompt}
                        ]
                    )
                # Assumindo que 'response' √© o objeto retornado pela chamada √† API
                argumento = response.choices[0].message.content
                return argumento

            argumento = gerar_argumento(receita_mensal, investimento_mensal, roi)
            st.write(argumento)
    else:
        st.info('Por favor, preencha os dados da simula√ß√£o e clique em "Calcular" antes de gerar o argumento.')
